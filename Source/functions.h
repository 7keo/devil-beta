#include "types.h"
// Function declarations

void __fastcall InitMonsterTRN(int monst, int special);
BOOL __fastcall unused_monster_40110B(int a1);
void __cdecl InitLevelMonsters();
int __fastcall AddMonsterType(int type, int placeflag);
void __cdecl GetLevelMTypes();
void __fastcall InitMonsterGFX(int monst);
void __fastcall ClearMVars(int i);
void __fastcall InitMonster(int i, int rd, int mtype, int x, int y);
void __cdecl ClrAllMonsters();
BOOL __fastcall MonstPlace(int xp, int yp);
void __fastcall PlaceMonster(int i, int mtype, int x, int y);
void unused_empty_fn_1();
void __fastcall PlaceUniqueMonst(int uniqindex, int miniontype, int packsize, int num);
void __cdecl PlaceQuestMonsters();
void __fastcall monster_402D39(int num);
void __fastcall PlaceGroup(int mtype, int num, unsigned __int8 leaderf, int leader);
void __cdecl InitMonsters();
void __fastcall SetMapMonsters(char *pMap, int startx, int starty);
void __fastcall DeleteMonster(int i);
int __fastcall AddMonster(int x, int y, int dir, int mtype, int InMap);
void __fastcall NewMonsterAnim(int i, AnimStruct *anim, int md);
int __fastcall M_Enemy(int i, int enemy);
int __fastcall M_GetDir(int i, int enemy);
void __fastcall M_CheckEFlag(int i);
void __fastcall M_StartStand(int i, int md);
void __fastcall M_StartDelay(int i, int len);
void __fastcall M_StartSpStand(int i, int md);
void __fastcall M_StartWalk(int i, int xvel, int yvel, int xadd, int yadd, int EndDir);
void __fastcall M_StartWalk2(int i, int xvel, int yvel, int xoff, int yoff, int xadd, int yadd, int EndDir);
void __fastcall M_StartWalk3(int i, int xvel, int yvel, int xoff, int yoff, int xadd, int yadd, int mapx, int mapy, int EndDir);
void __fastcall M_StartAttack(int i);
void __fastcall M_StartRAttack(int i, int missile_type);
void __fastcall M_StartRSpAttack(int i, int missile_type, int dam);
void __fastcall M_StartSpAttack(int i);
void __fastcall M_StartEat(int i);
void __fastcall M_ClearSquares(int i);
void __fastcall M_StartHit(int i, int pnum, int dam);
void __fastcall M2MStartHit(int mid, int i, int dam);
void __fastcall MonstStartKill(int i, int pnum, int sendmsg);
void __fastcall M2MStartKill(int i, int mid);
void __fastcall M_StartKill(int i, int pnum);
void __fastcall M_SyncStartKill(int i, int x, int y, int pnum);
void __fastcall M_StartFadein(int i, int md);
void __fastcall M_StartFadeout(int i, int md, unsigned __int8 backwards);
void __fastcall M_StartHeal(int i);
void __fastcall M_ChangeLightOffset(int monst);
int __fastcall M_DoStand(int i);
int __fastcall M_DoWalk(int i);
int __fastcall M_DoWalk2(int i);
int __fastcall M_DoWalk3(int i);
void __fastcall M_TryM2MHit(int i, int mid, int hper, int mind, int maxd);
void __fastcall M_TryH2HHit(int i, int pnum, int Hit, int MinDam, int MaxDam);
int __fastcall M_DoAttack(int i);
int __fastcall M_DoRAttack(int i);
int __fastcall M_DoRSpAttack(int i);
int __fastcall M_DoSAttack(int i);
int __fastcall M_DoFadein(int i);
int __fastcall M_DoFadeout(int i);
int __fastcall M_DoHeal(int i);
int __fastcall M_DoTalk(int i);
void __fastcall M_Teleport(int i);
int __fastcall M_DoGotHit(int i);
void __fastcall M_UpdateLeader(int i);
int __fastcall M_DoDeath(int i);
int __fastcall M_DoSpStand(int i);
int __fastcall M_DoDelay(int i);
int __fastcall M_DoStone(int i);
void __fastcall M_WalkDir(int i, int md);
void __fastcall GroupUnity(int i);
BOOL __fastcall M_CallWalk(int i, int md);
BOOL __fastcall M_PathWalk(int i);
BOOL __fastcall M_RoundWalk(int i, int md, int *dir);
void __fastcall MAI_Zombie(int i);
void __fastcall MAI_SkelSd(int i);
void __fastcall MAI_Bat(int i);
void __fastcall MAI_SkelBow(int i);
void __fastcall MAI_Fat(int i);
void __fastcall MAI_Sneak(int i);
void __fastcall MAI_Fireman(int i);
void __fastcall MAI_Fallen(int i);
void __fastcall MAI_Cleaver(int i);
void __fastcall MAI_Round(int i, unsigned __int8 special);
void __fastcall MAI_GoatMc(int i);
void __fastcall MAI_Ranged(int i, int missile_type, unsigned __int8 special);
void __fastcall MAI_GoatBow(int i);
void __fastcall MAI_Succ(int i);
void __fastcall MAI_AcidUniq(int i);
void __fastcall MAI_Scav(int i);
void __fastcall MAI_Garg(int i);
void __fastcall MAI_RoundRanged(int i, int missile_type, unsigned __int8 checkdoors);
void __fastcall MAI_Magma(int i);
void __fastcall MAI_Storm(int i);
void __fastcall MAI_Acid(int i);
void __fastcall MAI_Golum(int i);
void __fastcall MAI_SkelKing(int i);
void __fastcall MAI_Rhino(int i);
void __fastcall MAI_Garbud(int i);
void __fastcall MAI_SnotSpil(int i);
void __cdecl DeleteMonsterList();
void __cdecl ProcessMonsters();
void __cdecl FreeMonsters();
BOOL __fastcall DirOK(int i, int mdir);
BOOL __fastcall PosOkMissile(int x, int y);
bool __fastcall CheckNoSolid(int x, int y);
BOOL __fastcall LineClearF(BOOL (__fastcall *Clear)(int, int), int x1, int y1, int x2, int y2);
BOOL __fastcall LineClear(int x1, int y1, int x2, int y2);
BOOL __fastcall LineClearF1(int i, int x1, int y1, int x2, int y2);
void __fastcall unused_sub_40F443(int a1);
void __fastcall M_FallenFear(int x, int y);
void __fastcall PrintMonstHistory(int mt);
void __fastcall MissToMonst(int i, int x, int y);
BOOL __fastcall PosOkMonst(int i, int x, int y);
BOOL __fastcall IsSkel(int mt);
int __fastcall M_SpawnSkel(int x, int y, int dir);
void __fastcall ActivateSpawn(int i, int x, int y, int dir);
void __fastcall SpawnSkeleton(int ii, int x, int y);
int __cdecl PreSpawnSkeleton();
void __fastcall TalktoMonster(int i);
void __fastcall SpawnGolum(int i, int x, int y);
char *__fastcall GetErr(int error_code);
void __fastcall GetDDErr(int error_code, char *error_buf, int error_buf_len);
void __fastcall GetDSErr(int error_code, char *error_buf, int error_buf_len);
char *__cdecl GetLastErr();
void TermMsg(char *pszFmt, ...);
void __fastcall MsgBox(char *pszFmt, va_list va);
void DrawDlg(char *pszFmt, ...);
void __fastcall __noreturn assertion_failed(int line, char *file);
void __fastcall DDErrDlg(int error_code, int log_line_nr, char *log_file_path);
void __fastcall DSErrDlg(int error_code, int log_line_nr, char *log_file_path);
void __cdecl FillSolidBlockTbls();
void __cdecl gendung_418D91();
void __fastcall gendung_4191BF(int frames);
void __fastcall gendung_4191FB(int a1, int a2);
int __fastcall gendung_get_dpiece_num_from_coord(int x, int y);
void __cdecl gendung_4192C2();
void __cdecl SetDungeonMicros();
void __cdecl DRLG_InitTrans();
void __fastcall DRLG_MRectTrans(int x1, int y1, int x2, int y2);
void __fastcall DRLG_RectTrans(int x1, int y1, int x2, int y2);
void __fastcall DRLG_CopyTrans(int sx, int sy, int dx, int dy);
void __fastcall DRLG_ListTrans(int num, unsigned __int8 *List);
void __fastcall DRLG_AreaTrans(int num, unsigned __int8 *List);
void __cdecl DRLG_SetPC();
void __cdecl j_minitext_4129E5_init_qtexts();
void __cdecl minitext_4129E5_init_qtexts();
void __cdecl FreeQuestText();
void __cdecl InitQuestText();
void __fastcall InitQTextMsg(int m);
void __cdecl DrawQTextBack();
void __fastcall PrintQTextChr(int screen_x, int screen_y, char *cel_buf, int frame);
void __cdecl DrawQText();
int __fastcall FindPath(int pnum, int sx, int sy, int dx, int dy, char *path);
int __fastcall path_get_h_cost(int sx, int sy, int dx, int dy);
signed int __fastcall path_check_equal(PATHNODE *pPath, int dx, int dy);
PATHNODE *__cdecl GetNextPath();
BOOL __fastcall path_solid_pieces(PATHNODE *pPath, int dx, int dy);
signed int __fastcall path_get_path(int pnum, PATHNODE *pPath, int x, int y);
signed int __fastcall path_parent_path(PATHNODE *pPath, int dx, int dy, int sx, int sy);
PATHNODE *__fastcall path_get_node1(int dx, int dy);
PATHNODE *__fastcall path_get_node2(int dx, int dy);
void __fastcall path_next_node(PATHNODE *pPath);
void __fastcall path_set_coords(PATHNODE *pPath);
void __fastcall path_push_active_step(PATHNODE *pPath);
PATHNODE *__cdecl path_pop_active_step();
PATHNODE *__cdecl path_new_step();
void __fastcall snd_stop_snd(TSnd *pSnd);
BOOL __fastcall snd_playing(TSnd *pSnd);
void __fastcall snd_play_snd(TSnd *pSnd, int lVolume, int lPan);
BOOL __fastcall sound_file_reload(TSnd *sound_file, IDirectSoundBuffer *DSB);
TSnd *__fastcall sound_file_load(char *path);
void __fastcall sound_CreateSoundBuffer(TSnd *sound_file);
void __fastcall sound_file_cleanup(TSnd *sound_file);
void __fastcall snd_init(HWND hWnd);
void __fastcall sound_load_volume(char *value_name, int *value);
void __fastcall sound_create_primary_buffer(int music_track);
void __cdecl sound_414561();
void __cdecl sound_cleanup();
void __fastcall sound_store_volume(char *key, int value);
void __stdcall sound_41464E(char *path);
void __cdecl music_stop();
void __fastcall music_start(int nTrack);
int __fastcall sound_get_or_set_music_volume(int volume);
int __fastcall sound_get_or_set_sound_volume(int volume);
void __fastcall DrawSpellCel(int xp, int yp, char *Trans, int nCel, int w);
void __fastcall SetSpellTrans(char t);
void __cdecl DrawSpell();
void __cdecl DrawSpellList();
void __cdecl SetSpell();
void __fastcall SetSpeedSpell(int slot);
void __fastcall ToggleSpell(int slot);
void __fastcall CPrintString(int No, char frame, char Just);
void __fastcall AddPanelString(char *str, int just);
void __cdecl ClearPanel();
void __fastcall DrawPanelBox(int x, int y, WORD w, WORD h, int sx, int sy);
void j_ClearPanel();
void __fastcall SetFlaskHeight(char *buf, int min, int max, int c, int r);
void __fastcall DrawFlask(char *Xbuf, int a2, int Xbufof, char *Xgbuf, int Xgbufoffset, int a6);
void __cdecl DrawLifeFlask();
void __cdecl UpdateLifeFlask();
void __cdecl DrawManaFlask();
void __cdecl control_update_life_mana();
void __cdecl UpdateManaFlask();
void __cdecl InitControlPan();
void __cdecl control_416813();
void __cdecl ClearCtrlPan();
void __cdecl DrawCtrlPan();
void __cdecl DoSpeedBook();
void __cdecl DoPanBtn();
void __fastcall control_set_button_down(int btn_id);
void __cdecl control_check_btn_press();
void __cdecl CheckPanelInfo();
void __cdecl CheckBtnUp();
void __cdecl FreeControlPan();
int __fastcall control_WriteStringToBuffer(char *str);
void __cdecl DrawInfoBox();
void __cdecl control_418275();
void __fastcall control_print_info_str(int y, char *str, bool center, int lines);
void __fastcall ADD_PlrStringXY(int x, int y, int width, char *pszStr, char Just);
void __fastcall PrintGameStr(int x, int y, char *str, int color);
void __cdecl DrawChr();
void __cdecl CheckLvlBtn();
void __cdecl ReleaseLvlBtn();
void __cdecl DrawLevelUpIcon();
void __cdecl CheckChrBtns();
void __cdecl ReleaseChrBtns();
void __cdecl DrawDurIcon();
int __fastcall DrawDurIcon4Item(ItemStruct *item, int x, int frame);
void __cdecl RedBack();
char __fastcall GetSBookTrans(int ii, unsigned __int8 townok);
void __cdecl DrawSpellBook();
void __fastcall PrintSBookStr(int x, int y, bool cjustflag, char *pszStr, int bright);
void __cdecl CheckSBook();
int __cdecl control_41A64E();
void __fastcall DrawGoldSplit(int amount);
void __cdecl control_drop_gold(int n);
void __fastcall control_remove_gold(int pnum, int gold_index);
void __fastcall control_set_gold_curs(int pnum);
void __fastcall control_41AF7D(char *a1);
void __cdecl control_type_message();
void __cdecl control_reset_talk_msg();
void __cdecl DrawTalkPan();
void __cdecl control_reset_talk();
bool __fastcall control_41B284_is_printable(char a1);
int __fastcall control_talk_last_key(char a1);
int __fastcall control_presskeys(char a1);
void __fastcall control_press_enter(SHORT vkey);
int __fastcall nthread_send_and_recv_turn(int cur_turn, int turn_delta);
int __fastcall nthread_recv_turns(int *pfSendAsync, int *a2);
void __cdecl nthread_41B69A();
void __fastcall nthread_start(bool set_turn_upper_bit);
unsigned int __stdcall nthread_handler(void *a1);
void __cdecl nthread_cleanup();
void __fastcall nthread_ignore_mutex(bool bStart);
BOOL __cdecl nthread_has_500ms_passed();
size_t EventPlrMsg(char *pszFmt, ...);
void __fastcall SendPlrMsg(int pnum, const char *pszStr);
void __cdecl ClearPlrMsg();
void __cdecl InitPlrMsg();
void __cdecl DrawPlrMsg();
void __fastcall PrintPlrMsg(int no, int x, int y, char *str, int just);
void __fastcall NetSendLoPri(unsigned __int8 *pbMsg, unsigned __int8 bLen);
void __fastcall multi_copy_packet(void *a1, void *packet, BYTE size);
void __fastcall NetSendHiPri_1(void *packet, BYTE size);
void __fastcall NetSendHiPri(unsigned __int8 *pbMsg, unsigned __int8 bLen);
void __fastcall multi_recv_packet(void *packet, BYTE size, int *a3);
void __fastcall multi_send_msg_packet(int a1, unsigned __int8 *a2, unsigned __int8 len);
void __fastcall multi_msg_countdown();
void __fastcall multi_parse_turn(int pnum);
void __fastcall multi_41C8BA(BOOL a1);
void __fastcall multi_41C9FB(int pnum, int a2);
void __fastcall multi_41CA8A(int pnum);
int __fastcall multi_handle_delta();
int __fastcall multi_check_pkt_valid(char *a1);
void __cdecl multi_mon_seeds();
void __cdecl multi_begin_timeout();
void __cdecl multi_process_network_packets();
void __fastcall multi_handle_all_packets(int a1, int a2, int a3);
void __fastcall multi_41D36B(int pnum, char, PkPlayerStruct *, int);
void __fastcall multi_41D54D(int pnum, char a2);
void __cdecl NetClose();
void __fastcall multi_event_handler(BOOL a1);
void __stdcall multi_handle_events(void *a1);
int __fastcall NetInit(int bSinglePlayer, int *pfExitProgram);
void __fastcall multi_clear_pkt(char *a1);
int __fastcall InitNewSeed(int newseed);
void __cdecl SetupLocalCoords();
int __fastcall multi_upgrade(int *a1);
void __fastcall multi_player_joins(int pnum, TCmdPlrInfoHdr *cmd, int a3);
BOOL __cdecl IncProgress();
void __cdecl DrawCutscene();
void __fastcall DrawProgress(int screen_x, int screen_y, int progress_id);
void __fastcall ShowProgress(int uMsg);
void __cdecl FreeInterface();
void __fastcall InitCutscene(int interface_mode);
LRESULT __stdcall interfac_41F03E_wndproc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
BOOL __cdecl mpqapi_write_header();
BOOL __cdecl mpqapi_write_block_table();
BOOL __cdecl mpqapi_write_hash_table();
BOOL __cdecl mpqapi_can_seek();
void __fastcall mpqapi_close_archive(char *pszArchive, bool bFree, int dwChar);
BOOL __fastcall mpqapi_open_archive(char *pszArchive, BOOL hidden);
BOOL __fastcall mpqapi_parse_archive_header(TMPQHeader *pHdr, int *pdwNextFileStart);
void __fastcall mpqapi_remove_hash_entry(char *pszName);
void __fastcall mpqapi_alloc_block(int block_offset, int block_size);
_BLOCKENTRY *__fastcall mpqapi_new_block(int *block_index);
int __fastcall mpqapi_get_hash_index_of_path(char *pszName);
int __fastcall mpqapi_get_hash_index(__int16 index, int hash_a, int hash_b, int locale);
void __fastcall mpqapi_remove_hash_entries(bool (__stdcall *fnGetName)(int, char *));
BOOL __fastcall mpqapi_write_file(char *pszName, char *pbData, int dwLen);
_BLOCKENTRY *__fastcall mpqapi_add_file(char *pszName);
BOOL __fastcall mpqapi_write_file_contents(char *pszName, char *pbData, int dwLen, _BLOCKENTRY *pBlk);
int __fastcall mpqapi_find_free_block(int size, int *block_size);
signed int empty_fn_2();
void empty_fn_4();
void __cdecl InitItemGFX();
BOOL __fastcall ItemPlace(int x, int y);
void __cdecl AddInitItems();
void __cdecl InitItems();
void __fastcall CalcPlrItemVals(int p, BOOL Loadgfx);
void __fastcall CalcPlrScrolls(int p);
void __fastcall CalcPlrStaff(int pnum);
BOOL __fastcall CalcSelfItems(int pnum);
BOOL __fastcall ItemMinStats(PlayerStruct *a1, ItemStruct *a2);
void __fastcall CalcPlrInv(int p, BOOL Loadgfx);
void __fastcall SetPlrHandItem(ItemStruct *h, int idata);
void __fastcall GetPlrHandSeed(ItemStruct *h);
void __fastcall SetPlrHandSeed(ItemStruct *h, int iseed);
void __fastcall CreatePlrItems(int p);
BOOL __fastcall ItemSpaceOk(int i, int j);
BOOL __fastcall GetItemSpace(int x, int y, char inum);
void __fastcall GetSuperItemSpace(int x, int y, char inum);
void __fastcall CalcItemValue(int i);
void __fastcall GetBookSpell(int i, int lvl);
void __fastcall GetStaffPower(int i, int lvl, int bs, unsigned __int8 onlygood);
void __fastcall GetStaffSpell(int i, int lvl, unsigned __int8 onlygood);
void __fastcall GetOilMagic(int i, int lvl);
void __fastcall GetItemAttrs(int i, int idata, int lvl);
int __fastcall RndPL(int param1, int param2);
int __fastcall PLVal(int pv, int p1, int p2, int minv, int maxv);
void __fastcall SaveItemPower(int i, int power, int param1, int param2, int minval, int maxval, int multval);
void __fastcall GetItemPower(int i, int minlvl, int maxlvl, int flgs, int onlygood);
void __fastcall GetItemBonus(int i, int idata, int minlvl, int maxlvl, int onlygood);
void __fastcall SetupItem(int i);
int __fastcall RndItem(int m);
int __fastcall RndUItem(int m);
int __cdecl RndAllItems();
int __fastcall RndTypeItems(int itype, int imid);
int __fastcall CheckUnique(int i, int lvl, int uper, bool recreate);
void __fastcall GetUniqueItem(int i, int uid);
void __fastcall SpawnUnique(int uid, int x, int y);
void __fastcall ItemRndDur(int ii);
void __fastcall SetupAllItems(int ii, int idx, int iseed, int lvl, int uper, int onlygood, int recreate, int pregen);
void __fastcall SpawnItem(int m, int x, int y, unsigned __int8 sendmsg);
void __fastcall CreateItem(int uid, int x, int y);
void __fastcall CreateRndItem(int x, int y, unsigned __int8 onlygood, unsigned __int8 sendmsg, int delta);
void __fastcall SetupAllUseful(int ii, int iseed, int lvl);
void __fastcall CreateRndUseful(int pnum, int x, int y, unsigned __int8 sendmsg);
void __fastcall CreateTypeItem(int x, int y, unsigned __int8 onlygood, int itype, int imisc, int sendmsg, int delta);
void __fastcall RecreateItem(int ii, int idx, unsigned __int16 ic, int iseed, int ivalue);
void __cdecl SpawnRock();
void __fastcall RespawnItem(int i, bool FlipFlag);
void __fastcall DeleteItem(int ii, int i);
void __cdecl ProcessItems();
void __cdecl FreeItemGFX();
void __fastcall GetItemStr(int i);
void __fastcall CheckIdentify(int pnum, int cii);
void __fastcall DoRepair(int pnum, int cii);
void __fastcall RepairItem(ItemStruct *i, int lvl);
void __fastcall DoRecharge(int pnum, int cii);
void __fastcall RechargeItem(ItemStruct *i, int r);
void __fastcall DoOil(int pnum, int i);
void __fastcall OilItem(ItemStruct *item, PlayerStruct *p);
void __fastcall PrintItemOil(char IDidx);
void __fastcall PrintItemPower(char power, ItemStruct *item);
void __cdecl DrawUBack();
void __fastcall PrintUString(int x, int y, int cjustflag, char *str, int col);
void __fastcall DrawULine(int y);
void __cdecl DrawUniqueInfo();
void __fastcall PrintItemMisc(ItemStruct *x);
void __fastcall PrintItemDetails(ItemStruct *x);
void __fastcall PrintItemDur(ItemStruct *x);
void __fastcall UseItem(int p, int Mid, int spl);
BOOL __fastcall StoreStatOk(ItemStruct *h);
BOOL __fastcall SmithItemOk(int i);
int __fastcall RndSmithItem(int lvl);
void __fastcall SpawnSmith(int lvl);
BOOL __fastcall PremiumItemOk(int i);
int __fastcall RndPremiumItem(int minlvl, int maxlvl);
void __fastcall SpawnOnePremium(int i, int plvl);
void __fastcall SpawnPremium(int lvl);
BOOL __fastcall WitchItemOk(int i);
int __fastcall RndWitchItem(int lvl);
void __fastcall SpawnWitch(int lvl);
int __fastcall RndBoyItem(int lvl);
void __fastcall SpawnBoy(int lvl);
BOOL __fastcall HealerItemOk(int i);
int __fastcall RndHealerItem(int lvl);
void __fastcall SpawnHealer(int lvl);
void __cdecl SpawnStoreGold();
void __fastcall RecreateSmithItem(int ii, int idx, int plvl, int iseed);
void __fastcall RecreatePremiumItem(int ii, int idx, int lvl, int iseed);
void __fastcall RecreateBoyItem(int ii, int idx, int lvl, int iseed);
void __fastcall RecreateWitchItem(int ii, int idx, int lvl, int iseed);
void __fastcall RecreateHealerItem(int ii, int idx, int lvl, int iseed);
void __fastcall RecreateTownItem(int ii, int idx, unsigned __int16 icreateinfo, int iseed, int ivalue);
void __cdecl unused_sub_42CB9C();
void unused_sub_42CD40();
void __cdecl unused_sub_42CD9D();
void __cdecl RecalcStoreStats();
BOOL requires_pentium();
int __cdecl init_42D223_pentium_check_hack();
void __cdecl dx_cleanup_42D257();
void __fastcall dx_init_42D315(HWND hwnd);
void __cdecl dx_reinit_42D562();
void __fastcall init_cleanup();
void __cdecl init_run_office_from_start_menu();
void __fastcall init_run_office(char *dir);
void __fastcall init_disable_screensaver(bool disable);
void __fastcall init_42DA06_caps_lock(BOOL a1);
void __fastcall init_42DAAC_press_key(BYTE key);
void __fastcall init_create_window(int nCmdShow);
HWND __cdecl init_find_mom_parent();
void __cdecl init_archives();
void *__fastcall init_test_access(char *mpq_path, char *mpq_name, char *reg_loc, int flags, bool on_cd);
char *__fastcall init_strip_trailing_slash(char *path);
void __cdecl init_get_file_info();
LRESULT __stdcall MainWndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
LRESULT __stdcall WindowProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
WNDPROC __fastcall SetWindowProc(WNDPROC func);
void __cdecl InitStores();
void __cdecl SetupTownStores();
void __cdecl FreeStoreMem();
void __cdecl DrawSTextBack();
void __fastcall PrintSString(int x, int y, unsigned __int8 cjustflag, char *str, char col, int val);
void __fastcall DrawSLine(int y);
void __fastcall DrawSArrows(int y1, int y2);
void __cdecl DrawSTextHelp();
void __fastcall ClearSText(int s, int e);
void __fastcall AddSLine(int y);
void __fastcall AddSTextVal(int y, int val);
void __fastcall OffsetSTextY(int y, int yo);
void __fastcall AddSText(int x, int y, unsigned __int8 j, char *str, int clr, int sel);
void __cdecl S_StartSmith();
void __fastcall S_ScrollSBuy(int idx);
void __fastcall PrintStoreItem(ItemStruct *x, int l, char iclr);
void __cdecl S_StartSBuy();
void __fastcall S_ScrollSPBuy(int idx);
void __cdecl S_StartSPBuy();
BOOL __fastcall SmithSellOk(int i);
void __fastcall S_ScrollSSell(int idx);
void __cdecl S_StartSSell();
BOOL __fastcall SmithRepairOk(int i);
void __cdecl S_StartSRepair();
void __fastcall AddStoreHoldRepair(ItemStruct *itm, int i);
void __cdecl S_StartWitch();
void __fastcall S_ScrollWBuy(int idx);
void __cdecl S_StartWBuy();
BOOL __fastcall WitchSellOk(int i);
void __cdecl S_StartWSell();
BOOL __fastcall WitchRechargeOk(int i);
void __fastcall AddStoreHoldRecharge(ItemStruct itm, int i, int pnum);
void __cdecl S_StartWRecharge();
void __cdecl S_StartNoMoney();
void __cdecl S_StartNoRoom();
void __cdecl S_StartConfirm();
void __cdecl S_StartBoy();
void __cdecl S_StartBBoy();
void __cdecl S_StartHealer();
void __fastcall S_ScrollHBuy(int idx);
void __cdecl S_StartHBuy();
void __cdecl S_StartStory();
BOOL __fastcall IdItemOk(ItemStruct *i);
void __fastcall AddStoreHoldId(ItemStruct itm, int i);
void __cdecl S_StartSIdentify();
void __fastcall StartStore(char s);
void __cdecl DrawSText();
void __cdecl STextESC();
void __cdecl STextUp();
void __cdecl STextDown();
void __cdecl S_SmithEnter();
void __fastcall SetGoldCurs(int pnum, int i);
void __fastcall SetSpdbarGoldCurs(int pnum, int i);
void __fastcall TakePlrsMoney(int cost);
void __cdecl SmithBuyItem();
void __cdecl S_SBuyEnter();
void __cdecl SmithBuyPItem();
void __cdecl S_SPBuyEnter();
BOOL __fastcall StoreGoldFit(int idx);
void __fastcall PlaceStoreGold(int v);
void __cdecl StoreSellItem();
void __cdecl S_SSellEnter();
void __cdecl SmithRepairItem();
void __cdecl S_SRepairEnter();
void __cdecl S_WitchEnter();
void __cdecl WitchBuyItem();
void __cdecl S_WBuyEnter();
void __cdecl S_WSellEnter();
void __cdecl WitchRechargeItem();
void __cdecl S_WRechargeEnter();
void __cdecl S_BoyEnter();
void __cdecl BoyBuyItem();
void __cdecl HealerBuyItem();
void __cdecl S_BBuyEnter();
void __cdecl StoryIdItem();
void __cdecl S_ConfirmEnter();
void __cdecl S_HealerEnter();
void __cdecl S_HBuyEnter();
void __cdecl S_StoryEnter();
void __cdecl S_SIDEnter();
void __cdecl STextEnter();
void __cdecl CheckStoreBtn();
void __cdecl ReleaseStoreBtn();
void __cdecl CaptureScreen();
BOOL __fastcall CaptureHdr(HANDLE hFile, __int16 width, __int16 height);
BOOL __fastcall CapturePal(HANDLE hFile, PALETTEENTRY *palette);
BOOL __fastcall CapturePix(HANDLE hFile, WORD width, WORD height, WORD stride, BYTE *pixels);
BYTE *__fastcall CaptureEnc(BYTE *src, BYTE *dst, int width);
HANDLE __fastcall CaptureFile(char *dst_path);
void __fastcall RedPalette(PALETTEENTRY *pal);
int __fastcall ObjIndex(int x, int y);
void __cdecl AddSKingObjs();
void __cdecl AddSChamObjs();
void __fastcall DRLG_SetMapTrans(char *sFileName);
void __cdecl LoadSetMap();
void __fastcall pfile_436940_tolower(char *c);
void __cdecl pfile_436980_init_savename();
void __fastcall pfile_436A75_reverse_name(int pnum);
int __fastcall pfile_get_save_num_from_name(char *name);
void __cdecl pfile_write_hero();
void __fastcall pfile_encode_hero(unsigned int save_num, PkPlayerStruct *pPack);
void __fastcall pfile_436D33(int n, char *buf);
void __fastcall game_2_ui_player(PlayerStruct *a1, _uiheroinfo *a2);
char __fastcall game_2_ui_class(PlayerStruct *a1);
bool __stdcall pfile_ui_set_hero_infos(void (__stdcall *ui_add_hero_info)(_uiheroinfo *));
void *__fastcall pfile_open_save_archive(int *unused, int save_num);
BOOL __fastcall pfile_read_hero(unsigned int a1, PkPlayerStruct *pPack, char *a3);
bool __stdcall pfile_ui_set_class_stats(int player_class_nr, _uidefaultstats *class_stats);
char __fastcall pfile_get_player_class(int player_class_nr);
bool __stdcall pfile_ui_save_create(_uiheroinfo *heroinfo);
bool __stdcall pfile_get_file_name(int lvl, char *dst);
bool __stdcall pfile_delete_save(_uiheroinfo *hero_info);
void __cdecl pfile_read_player_from_save();
bool __fastcall pfile_archive_contains_game(int hsArchive);
void __fastcall pfile_unused_sub_4376DF(char *);
void __fastcall pfile_unused_sub_437792(char *);
void __fastcall pfile_unused_sub_43780C(int a1, void *a2, int size, int size_64);
void __fastcall pfile_unused_sub_437919(int *a1, int *size);
void __fastcall pfile_update(BOOL force_save);
void __fastcall SetLightFX(int *x, int *y, int *s_r, int *s_g, int *s_b, int *d_r, int *d_g, int *d_b);
void __fastcall DoLighting(int nXPos, int nYPos, int nRadius, int Lnum);
void __fastcall DoUnLight(int nXPos, int nYPos, int nRadius);
void __fastcall DoUnVision(int nXPos, int nYPos, int nRadius);
void __fastcall DoVision(int nXPos, int nYPos, int nRadius, unsigned __int8 doautomap, int visible);
void __cdecl FreeLightTable();
void __cdecl MakeLightTable();
void unused_sub_438F77();
void unused_sub_4390A4();
void __cdecl InitLightMax();
void __cdecl InitLighting();
int __fastcall AddLight(int x, int y, int r);
void __fastcall AddUnLight(int i);
void __fastcall ChangeLightRadius(int i, int r);
void __fastcall ChangeLightXY(int i, int x, int y);
void __fastcall ChangeLightOff(int i, int x, int y);
void __fastcall ChangeLight(int i, int x, int y, int r);
void __cdecl ProcessLightList();
void __cdecl SavePreLighting();
void __cdecl InitVision();
int __fastcall AddVision(int x, int y, int r, bool mine);
void __fastcall ChangeVisionRadius(int id, int r);
void __fastcall ChangeVisionXY(int id, int x, int y);
void __cdecl ProcessVisionList();
void __cdecl mainmenu_refresh_music();
void __fastcall mainmenu_action(int option);
int __cdecl mainmenu_multi_player();
int __fastcall mainmenu_init_menu(int a1);
void __fastcall LoadL3Dungeon(char *sFileName, int vx, int vy);
void __cdecl InitL3Dungeon();
void __cdecl DRLG_L3Pass3();
void __fastcall LoadPreL3Dungeon(char *sFileName, int vx, int vy);
BOOL __fastcall ReadWaveFile(int handle, WAVEFORMATEX *wf, int *len);
BOOL __fastcall WReadFile(int hsFile, DWORD tag, void *a3);
int __fastcall LoadGame(int a1);
void __cdecl SaveGame();
void __cdecl SaveLevel();
void __cdecl LoadLevel();
int __fastcall FindClosest(int sx, int sy, int rad);
int __fastcall GetSpellLevel(int id, int sn);
void __fastcall missiles_43AFC2(int, int, int, int, int);
BOOL __fastcall CheckBlock(int fx, int fy, int tx, int ty);
int __fastcall GetDirection8(int x1, int y1, int x2, int y2);
int __fastcall GetDirection16(int x1, int y1, int x2, int y2);
void __fastcall DeleteMissile(int mi, int i);
void __fastcall GetMissileVel(int i, int sx, int sy, int dx, int dy, int v);
void __fastcall PutMissile(int i);
void __fastcall GetMissilePos(int i);
void __fastcall MoveMissilePos(int i);
BOOL __fastcall MonsterTrapHit(int m, int mindam, int maxdam, int dist, int t, int shift);
BOOL __fastcall MonsterMHit(int pnum, int m, int mindam, int maxdam, int dist, int t, BYTE shift);
BOOL __fastcall PlayerMHit(int pnum, int m, int dist, int mind, int maxd, int mtype, BYTE shift);
BOOL __fastcall Plr2PlrMHit(int pnum, int p, int mindam, int maxdam, int dist, int mtype, BYTE shift);
void __fastcall CheckMissileCol(int i, int mindam, int maxdam, bool shift, int mx, int my, BYTE nodel);
void __fastcall SetMissAnim(int mi, int animtype);
void __fastcall SetMissDir(int mi, int dir);
void __fastcall LoadMissileGFX(BYTE mi);
void __cdecl InitMissileGFX();
void __fastcall FreeMissileGFX(int mi);
void __cdecl FreeMissiles();
void __cdecl FreeMissiles2();
void __cdecl InitMissiles();
void __fastcall AddLArrow(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddArrow(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddRndTeleport(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddFirebolt(int mi, int sx, int sy, int dx, int dy, int midir, int micaster, int id, int dam);
void __fastcall AddMagmaball(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall miss_null_33(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddTeleport(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddLightball(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddFirewall(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddFireball(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddLightctrl(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddLightning(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddMisexp(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddWeapexp(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddTown(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddFlash(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddFlash2(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddManashield(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddFiremove(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddGuardian(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddChain(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall miss_null_11(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall miss_null_12(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall miss_null_13(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddRhino(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall miss_null_32(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddFlare(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddAcid(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall miss_null_1D(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddAcidpud(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddStone(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddGolem(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddEtherealize(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall miss_null_1F(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall miss_null_23(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddBoom(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddHeal(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddHealOther(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddElement(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddIdentify(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddFirewallC(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddInfra(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddWave(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddNova(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddBlodboil(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddRepair(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddRecharge(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddDisarm(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddApoca(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddFlame(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddFlamec(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddCbolt(int mi, int sx, int sy, int dx, int dy, int midir, int micaster, int id, int dam);
void __fastcall AddHbolt(int mi, int sx, int sy, int dx, int dy, int midir, int micaster, int id, int dam);
void __fastcall AddResurrect(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddResurrectBeam(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddTelekinesis(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
void __fastcall AddBoneSpirit(int mi, int sx, int sy, int dx, int dy, int midir, int mienemy, int id, int dam);
int __fastcall AddMissile(int sx, int sy, int v1, int v2, int midir, int mitype, int micaster, int id, int v3);
signed int __fastcall unused_sub_44377B(int a1, int a2, int ty);
void __fastcall MI_Dummy(int i);
void __fastcall MI_SetManashield(int i);
void __fastcall MI_LArrow(int i);
void __fastcall MI_Arrow(int i);
void __fastcall MI_Firebolt(int i);
void __fastcall MI_Lightball(int i);
void __fastcall mi_null_33(int i);
void __fastcall MI_Acidpud(int i);
void __fastcall MI_Firewall(int i);
void __fastcall MI_Fireball(int i);
void __fastcall MI_Lightctrl(int i);
void __fastcall MI_Lightning(int i);
void __fastcall MI_Town(int i);
void __fastcall MI_Flash(int i);
void __fastcall MI_Flash2(int i);
void __fastcall MI_Manashield(int i);
void __fastcall MI_Etherealize(int i);
void __fastcall MI_Firemove(int i);
void __fastcall MI_Guardian(int i);
void __fastcall MI_Chain(int i);
void __fastcall mi_null_11(int i);
void __fastcall MI_Weapexp(int i);
void __fastcall MI_Misexp(int i);
void __fastcall MI_Acidsplat(int i);
void __fastcall MI_Teleport(int i);
void __fastcall MI_Stone(int i);
void __fastcall MI_Boom(int i);
void __fastcall MI_Rhino(int i);
void __fastcall mi_null_32(int i);
void __fastcall MI_FirewallC(int i);
void __fastcall MI_Infra(int i);
void __fastcall MI_Apoca(int i);
void __fastcall MI_Wave(int i);
void __fastcall MI_Nova(int i);
void __fastcall MI_Blodboil(int i);
void __fastcall MI_Flame(int i);
void __fastcall MI_Flamec(int i);
void __fastcall MI_Cbolt(int i);
void __fastcall MI_Hbolt(int i);
void __fastcall MI_Element(int i);
void __fastcall MI_ResurrectBeam(int i);
void __cdecl ProcessMissiles();
void __fastcall town_clear_upper_buf(BYTE *dst);
void __fastcall town_clear_low_buf(BYTE *dst);
void __fastcall town_44A643_empty(BYTE *, int);
void __fastcall town_44A6F5_empty(int, int);
void __fastcall town_draw_clipped_e_flag(BYTE *buffer, int x, int y, int sx, int sy);
void __fastcall town_draw_clipped_town(BYTE *buffer_unused, int x, int y, int sx, int sy, int some_flag);
void __fastcall town_draw_lower(int x, int y, int sx, int sy, int a5, int some_flag);
void __fastcall town_draw_clipped_e_flag_2(BYTE *buffer, int x, int y, int a4, int a5, int sx, int sy);
void __fastcall town_draw_clipped_town_2(BYTE *buffer, int x, int y, int a4, int a5, int sx, int sy, int some_flag);
void __fastcall town_draw_lower_2(int x, int y, int sx, int sy, int a5, int a6, int some_flag);
void __fastcall town_draw_e_flag(BYTE *buffer, int x, int y, int a4, int dir, int sx, int sy);
void __fastcall town_draw_town_all(BYTE *buffer, int x, int y, int a4, int dir, int sx, int sy, int some_flag);
void __fastcall town_draw_upper(int x, int y, int sx, int sy, int a5, int a6, int some_flag);
void __fastcall T_DrawGame(int x, int y);
void __fastcall T_DrawZoom(int x, int y);
void __fastcall T_DrawView(int StartX, int StartY);
void __cdecl town_init_dpiece_defs_map();
void __fastcall T_FillSector(WORD *P3Tiles, WORD *pSector, int xi, int yi, int w, int h);
void __cdecl T_Pass3();
void __fastcall CreateTown(int entry);
void __cdecl LoadDebugGFX();
void __cdecl FreeDebugGFX();
signed int unused_sub_44E41B();
int unused_sub_44E493();
int unused_sub_44E4D4();
int __fastcall unused_sub_44E516(int a1);
void __cdecl InitHelp();
int __stdcall DrawHelpLine(char *, int);
void __cdecl DrawHelp();
void __fastcall PrintHelpModeStr(int a1);
void __fastcall help_44EA77_add(int x, int y, char *text, int just);
void __fastcall help_44EB1A_add(int a1, int a2, int a3, int a4, char a5);
void __cdecl helpmode_draw2();
void __fastcall help_44EC51(int x, int y);
void __cdecl new_help_mode();
void __cdecl DisplayHelp();
void __cdecl HelpScrollUp();
void __cdecl HelpScrollDown();
void __cdecl FreeInvGFX();
void __cdecl InitInv();
void __fastcall InvDrawSlotBack(int X, int Y, int W, int H);
void __cdecl DrawInv();
void __cdecl DrawInvBelt();
int __fastcall AutoPlace(int pnum, int ii, int sx, int sy, int saveflag);
int __fastcall GoldAutoPlace(int pnum);
int __fastcall WeaponAutoPlace(int pnum);
int __fastcall SwapItem(ItemStruct *a, ItemStruct *b);
void __fastcall CheckInvPaste(int pnum, int mx, int my);
void __fastcall CheckInvSwap(int pnum, BYTE bLoc, int idx, int wCI, int seed, int bId);
void __fastcall CheckInvCut(int pnum, int mx, int my);
void __fastcall inv_update_rem_item(int pnum, int iv);
void __fastcall RemoveInvItem(int pnum, int iv);
void __fastcall RemoveSpdBarItem(int pnum, int iv);
void __cdecl CheckInvItem();
void __cdecl CheckInvScrn();
void __fastcall CheckItemStats(int pnum);
void __fastcall InvGetItem(int pnum, int ii);
void __fastcall AutoGetItem(int pnum, int ii);
int __fastcall FindGetItem(int indx, unsigned __int16 ci, int iseed);
void __fastcall SyncGetItem(int x, int y, int idx, unsigned __int16 ci, int iseed);
int __fastcall CanPut(int i, int j);
int __cdecl TryInvPut();
int __fastcall InvPutItem(int pnum, int x, int y);
int __fastcall SyncPutItem(int pnum, int x, int y, int idx, int icreateinfo, int iseed, int Id, int dur, int mdur, int ch, int mch, int ivalue, unsigned int ibuff);
char __cdecl CheckInvHLight();
void __fastcall RemoveScroll(int pnum);
BOOL __cdecl UseScroll();
void __fastcall UseStaffCharge(int pnum);
BOOL __cdecl UseStaff();
BOOL __fastcall inv_456F00(int sn);
int __fastcall UseInvItem(int pnum, int cii);
void __cdecl inv_45712E();
void __fastcall inv_4571FD(int pnum, int ii);
void __cdecl DoTelekinesis();
int __fastcall CalculateGold(int pnum);
int __fastcall GetActiveTowner(int t);
void __fastcall SetTownerGPtrs(void *pData, void **pAnim);
void __fastcall NewTownerAnim(int tnum, void *pAnim, int numFrames, int Delay);
void __fastcall InitTownerInfo(int i, int w, bool sel, int t, int x, int y, int ao, int tp);
void __cdecl InitSmith();
void __cdecl InitBarOwner();
void __cdecl InitTownDead();
void __cdecl InitWitch();
void __cdecl InitBoy();
void __cdecl InitHealer();
void __cdecl InitTeller();
void __cdecl InitDrunk();
void __cdecl InitCows();
void __cdecl InitTowners();
void __cdecl FreeTownerGFX();
void __fastcall TownCtrlMsg(int i);
void __cdecl TownBlackSmith();
void __cdecl TownBarOwner();
void __cdecl TownDead();
void __cdecl ProcessTowners();
void __fastcall towners_458FFA_sfx(int sfx1, int sfx2, int sfxlimit);
void __fastcall TalkToTowner(int p, int t);
void __cdecl InitAutomapOnce();
void __cdecl InitAutomap();
void __cdecl StartAutomap();
void __cdecl AutomapUp();
void __cdecl AutomapDown();
void __cdecl AutomapLeft();
void __cdecl AutomapRight();
void __cdecl AutomapZoomIn();
void __cdecl AutomapZoomOut();
void __fastcall DrawAutomapType(int screen_x, int screen_y, __int16 automap_type);
void __cdecl DrawAutomapPlr();
__int16 __fastcall GetAutomapType(int tx, int ty, bool view);
void __cdecl DrawAutomap();
void __fastcall SetAutomapView(int x, int y);
int __fastcall GetManaAmount(int id, int sn);
void __fastcall UseMana(int id, int sn);
BOOL __fastcall CheckSpell(int id, int sn, char st, bool manaonly);
void __fastcall CastSpell(int id, int spl, int sx, int sy, int dx, int dy, int caster);
void __fastcall DoResurrect(int pnum, int rid);
void __fastcall DoHealOther(int pnum, int rid);
void __fastcall InitDiabloMsg(char e);
void __cdecl ClrDiabloMsg();
void __cdecl DrawDiabloMsg();
void __cdecl InitObjectGFX();
void __cdecl FreeObjectGFX();
BOOL __fastcall RndLocOk(int xp, int yp);
BOOL __fastcall objects_45CC29(int x, int y);
void __fastcall InitRndLocObj(int min, int max, _object_id objtype);
void __fastcall InitRndLocBigObj(int min, int max, _object_id objtype);
void __cdecl ClrAllObjects();
void __cdecl AddTortures();
int __fastcall unused_sub_45D398(int a1, int a2, int ot, int a4);
void __fastcall unused_sub_45D6FE_lever(int a1, int a2, int a3, int a4, int x1, int y1, int x2, int y2);
void __fastcall objects_45D88D_add_books(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, int msg);
void __cdecl InitRndBarrels();
void __fastcall AddL1Objs(int x1, int y1, int x2, int y2);
void __fastcall AddL2Objs(int x1, int y1, int x2, int y2);
BOOL __fastcall WallTrapLocOk(int xp, int yp);
void __cdecl AddL2Torches();
BOOL __fastcall TorchLocOK(int xp, int yp);
void __cdecl AddObjTraps();
void __cdecl AddChestTraps();
void __fastcall InitObjects(int a1);
void __fastcall SetMapObjects(BYTE *pMap, int startx, int starty);
void __fastcall DeleteObject(int oi, int i);
void __fastcall SetupObject(int i, int x, int y, int ot);
void __fastcall SetObjMapRange(int i, int x1, int y1, int x2, int y2, int v);
void __fastcall SetBookMsg(int i, int msg);
void __fastcall AddL1Door(int i, int x, int y, _object_id ot);
void __fastcall AddSCambBook(int i);
void __fastcall AddChest(int i, int t);
void __fastcall AddL2Door(int i, int x, int y, _object_id ot);
void __fastcall AddSarc(int i);
void __fastcall AddFlameTrap(int i);
void __fastcall AddFlameLvr(int i);
void __fastcall AddTrap(int i);
void __fastcall AddObjLight(int i, int r);
void __fastcall AddBarrel(int i);
void __fastcall AddShrines_45F545(int i);
void __fastcall AddBookcase(int i);
void __fastcall AddBook_45F619(int i);
void __fastcall AddBloodFtn_45F644(int i);
void __fastcall AddDecap(int i);
void __fastcall AddObject(_object_id ot, int ox, int oy);
void __fastcall Obj_Light(int i, int lr);
void __fastcall Obj_StopAnim(int i);
void __fastcall Obj_Door(int i);
void __fastcall Obj_Sarc(int i);
void __fastcall ActivateTrapLine(_object_id ttype, int tid);
void __fastcall Obj_FlameTrap(int i);
void __fastcall Obj_Trap(int i);
void __cdecl ProcessObjects();
void __fastcall ObjSetMicro(int dx, int dy, int pn);
void __fastcall objects_set_door_piece(int x, int y);
void __fastcall ObjSetMini(int x, int y, int v);
void __fastcall ObjL1Special(int x1, int y1, int x2, int y2);
void __fastcall ObjL2Special(int x1, int y1, int x2, int y2);
void __fastcall DoorSet(int oi, int dx, int dy);
void __cdecl RedoPlayerVision();
void __fastcall OperateL1RDoor(int pnum, int oi, unsigned __int8 sendflag);
void __fastcall OperateL1LDoor(int pnum, int oi, unsigned __int8 sendflag);
void __fastcall OperateL2RDoor(int pnum, int oi, unsigned __int8 sendflag);
void __fastcall OperateL2LDoor(int pnum, int oi, unsigned __int8 sendflag);
void __fastcall MonstCheckDoors(int m);
void __fastcall ObjChangeMap(int x1, int y1, int x2, int y2);
void __fastcall OperateL1Door(int pnum, int i, unsigned __int8 sendflag);
void __fastcall OperateLever(int pnum, int i);
void __fastcall OperateBook(int pnum, int i);
void __fastcall OperateBookLever(int pnum, int i);
void __fastcall OperateSChambBk(int pnum, int i);
void __fastcall OperateChest(int pnum, int i, unsigned __int8 sendmsg);
void __fastcall OperateTrapLvr(int i);
void __fastcall OperateSarc(int pnum, int i, unsigned __int8 sendmsg);
void __fastcall OperateL2Door(int pnum, int i, unsigned __int8 sendflag);
void __fastcall TryDisarm(int pnum, int i);
void __fastcall OperateShrine(int pnum, int i, int sType);
void __fastcall OperateSkelBook(int pnum, int i, unsigned __int8 sendmsg);
void __fastcall OperateBookCase(int pnum, int i, unsigned __int8 sendmsg);
void __fastcall OperateBloodftn_464C82(int pnum, int i);
void __fastcall OperateDecap(int pnum, int i, unsigned __int8 sendmsg);
void __fastcall OperateObject(int pnum, int i, unsigned __int8 TeleFlag);
void __fastcall SyncOpL1Door(int pnum, int cmd, int i);
void __fastcall SyncOpL2Door(int pnum, int cmd, int i);
void __fastcall SyncOpObject(int pnum, int cmd, int i);
void __fastcall BreakCrux(int i);
void __fastcall BreakBarrel(int pnum, int i, int dam, unsigned __int8 forcebreak, int sendmsg);
void __fastcall BreakObject(int pnum, int oi);
void __fastcall SyncBreakObj(int pnum, int oi);
void __fastcall SyncL1Doors(int i);
void __fastcall SyncCrux(int i);
void __fastcall SyncLever(int i);
void __fastcall SyncL2Doors(int i);
void __fastcall GetObjectStr(int i);
void __cdecl gamemenu_previous();
void __cdecl gamemenu_off();
void __cdecl gamemenu_handle_previous();
void __fastcall j_gamemenu_previous(int);
void __fastcall gamemenu_new_game(int a1);
void __fastcall gamemenu_quit_game(int a1);
void __fastcall gamemenu_load_game(int a1);
void __fastcall gamemenu_save_game(int);
void __fastcall gamemenu_restart_town(int);
void __fastcall gamemenu_options(int);
void __cdecl gamemenu_get_music();
void __fastcall gamemenu_sound_music_toggle(char **names, BYTE music, TMenuItem *menu_item, int volume);
void __cdecl gamemenu_get_sound();
void __cdecl gamemenu_get_gamma();
void __fastcall gamemenu_music_volume(int a1);
int __fastcall gamemenu_slider_music_sound(TMenuItem *);
void __fastcall gamemenu_sound_volume(int a1);
void __fastcall gamemenu_gamma(int a1);
int __cdecl gamemenu_slider_gamma();
void __cdecl InitDead();
void __fastcall AddDead(int dx, int dy, char dv, int ddir);
void __cdecl sfx_stop();
void __fastcall InitMonsterSND(int monst);
void __cdecl FreeEffects();
void __fastcall PlayEffect(int i, int mode);
int __fastcall calc_snd_position(int x, int y, int *plVolume, int *plPan);
void __fastcall PlaySFX(int psfx);
void __fastcall PlaySFX_priv(TSFX *pSFX, char loc, int x, int y);
void __fastcall stream_play(TSFX *pSFX, int lVolume, int lPan);
void __fastcall effects_467CB1(TSFX *pSFX, int lVolume, int lPan);
int __fastcall RndSFX(int psfx);
void __fastcall PlaySfxLoc(int psfx, int x, int y);
void __cdecl effects_467E16();
void __cdecl effects_467E30();
void __cdecl effects_467E94();
void __cdecl sound_update();
void __cdecl snd_update();
void __cdecl effects_467FE5();
void __cdecl effects_cleanup_sfx();
void __cdecl track_process();
void __fastcall track_repeat_walk(bool rep);
void __fastcall PackPlayer(PkPlayerStruct *pPack, int pnum);
void __fastcall PackItem(PkItemStruct *id, ItemStruct *is);
void __fastcall UnPackPlayer(PkPlayerStruct *pPack, int pnum);
void __fastcall UnPackItem(PkItemStruct *is, ItemStruct *id);
void __fastcall SetPlayerGPtrs(DWORD *pData, DWORD *pAnim);
void __fastcall player_468D2D(int a1);
void __fastcall LoadPlrGFX(int pnum, int gfxflag);
void __fastcall InitPlayerGFX(int pnum);
void __fastcall InitPlrGFXMem(int pnum);
void __fastcall FreePlayerGFX(int pnum);
void __fastcall NewPlrAnim(int pnum, int Peq, int numFrames, int Delay, int width);
void __fastcall ClearPlrPVars(int pnum);
void __fastcall SetPlrAnims(int pnum);
void __fastcall CreatePlayer(int pnum, char c);
void __fastcall NextPlrLevel(int pnum);
void __fastcall AddPlrExperience(int pnum, int lvl, int exp);
void __fastcall AddPlrMonstExper(int lvl, int exp, char pmask);
void __fastcall InitPlayer(int pnum, BOOL FirstTime);
void __cdecl InitMultiView();
void __fastcall InitPlayerLoc(int pnum, BOOL flag);
int __fastcall unused_sub_46CEDF(int pnum, int mi);
int __fastcall unused_sub_46CF61(int pnum, int x, int y); // idb
BOOL __fastcall SolidLoc(int x, int y);
BOOL __fastcall PlrDirOK(int pnum, int dir);
void __fastcall PlrClrTrans(int x, int y);
void __fastcall PlrDoTrans(int x, int y);
void __fastcall SetPlayerOld(int pnum);
void __fastcall FixPlayerLocation(int pnum, int dir);
void __fastcall StartStand(int pnum, int dir);
void __fastcall StartWalkStand(int pnum);
void __fastcall PM_ChangeLightOff(int pnum);
void __fastcall PM_ChangeOffset(int pnum);
void __fastcall StartWalk(int pnum, int xvel, int yvel, int xadd, int yadd, int EndDir, int sdir);
void __fastcall StartWalk2(int pnum, int xvel, int yvel, int xoff, int yoff, int xadd, int yadd, int EndDir, int sdir);
void __fastcall StartWalk3(int pnum, int xvel, int yvel, int xoff, int yoff, int xadd, int yadd, int mapx, int mapy, int EndDir, int sdir);
void __fastcall StartAttack(int pnum, int d);
void __fastcall StartRangeAttack(int pnum, int d, int cx, int cy);
void __fastcall StartPlrBlock(int pnum, int dir);
void __fastcall StartSpell(int pnum, int d, int cx, int cy);
void __fastcall RemovePlrFromMap(int pnum);
void __fastcall StartPlrHit(int pnum, int dam);
void __fastcall RespawnDeadItem(ItemStruct *itm, int x, int y);
void __fastcall StartPlayerKill(int pnum);
void __fastcall PlrDeadItem(int pnum, struct ItemStruct *itm, int xx, int yy);
void __fastcall DropHalfPlayersGold(int pnum);
void __fastcall SyncPlrKill(int pnum);
void __fastcall RemovePlrMissiles(int pnum);
void __fastcall InitLevelChange(int pnum);
void __fastcall StartNewLvl(int pnum, int fom, int lvl);
void __fastcall RestartTownLvl(int pnum);
void __fastcall StartWarpLvl(int pnum, int pidx);
int __fastcall PM_DoStand();
int __fastcall PM_DoWalk(int pnum);
int __fastcall PM_DoWalk2(int pnum);
int __fastcall PM_DoWalk3(int pnum);
void __fastcall WeaponDur(int pnum, int durrnd);
BOOL __fastcall PlrHitMonst(int pnum, int m);
BOOL __fastcall PlrHitPlr(int pnum, char p);
BOOL __fastcall PlrHitObj(int pnum, int mx, int my);
int __fastcall PM_DoAttack(int pnum);
int __fastcall PM_DoRangeAttack(int pnum);
void __fastcall ShieldDur(int pnum);
int __fastcall PM_DoBlock(int pnum);
int __fastcall PM_DoSpell(int pnum);
int __fastcall PM_DoGotHit(int pnum);
void __fastcall ArmorDur(int pnum);
int __fastcall PM_DoDeath(int pnum);
int __fastcall PM_DoNewLvl(int pnum);
void __fastcall CheckNewPath(int pnum);
BOOL __fastcall PlrDeathModeOK(int pnum);
void __cdecl ProcessPlayers();
void __fastcall ClrPlrPath(int pnum);
BOOL __fastcall PosOkPlayer(int pnum, int px, int py);
void __fastcall MakePlrPath(int pnum, int xx, int yy, unsigned __int8 endspace);
void __fastcall CheckPlrSpell();
void __fastcall SyncPlrAnim(int pnum);
void __fastcall SyncInitPlrPos(int pnum);
void __fastcall ModifyPlrStr(int pnum, int l);
void __fastcall ModifyPlrMag(int pnum, int l);
void __fastcall ModifyPlrDex(int pnum, int l);
void __fastcall ModifyPlrVit(int pnum, int l);
void __fastcall SetPlayerHitPoints(int pnum, int newhp);
void __fastcall SetPlrStr(int pnum, int v);
void __fastcall SetPlrMag(int pnum, int v);
void __fastcall SetPlrDex(int pnum, int v);
void __fastcall SetPlrVit(int pnum, int v);
void __cdecl InitQuests();
void __cdecl CheckQuests();
BOOL __cdecl ForceQuests();
void __fastcall QuestStatus(int i);
void __fastcall CheckQuestKill(int m, unsigned __int8 sendmsg);
void __cdecl DrawButcher();
void __fastcall DrawSkelKing(int quest_id, int xx, int yy);
void __fastcall DrawSChamber(int quest_id, int xx, int yy);
void __fastcall DrawLTBanner(int xx, int yy);
void __fastcall DrawBlind(int xx, int yy);
void __fastcall DrawBlood(int xx, int yy);
void __fastcall DRLG_CheckQuests(int xx, int yy);
void __cdecl SetReturnLvlPos();
void __cdecl unused_sub_479731();
void unused_sub_479755();
void __fastcall PrintQLString(int x, int y, unsigned __int8 cjustflag, char *str, int col);
void __cdecl DrawQuestLog();
void __cdecl StartQuestlog();
void __cdecl QuestlogUp();
void __cdecl QuestlogDown();
void __cdecl QuestlogEnter();
void __cdecl QuestlogESC();
void __cdecl QuestlogOff();
void __cdecl gmenu_draw_pause();
void __fastcall gmenu_print_text(int x, int y, char *pszStr);
void __cdecl FreeGMenu();
void __cdecl gmenu_init_menu();
BOOL __cdecl gmenu_exception();
void __fastcall gmenu_call_proc(TMenuItem *);
void __fastcall gmenu_up_down(int a1);
void __cdecl gmenu_draw();
void __fastcall gmenu_draw_menu_item(TMenuItem *a1, int y);
void __fastcall gmenu_clear_buffer(int x, int y, int width, int height);
int __fastcall gmenu_get_lfont(TMenuItem *);
int __fastcall gmenu_presskeys(int a1);
void __fastcall gmenu_left_right(int a1);
int __fastcall gmenu_on_mouse_move();
bool __fastcall gmenu_valid_mouse_pos(int *plOffset);
int __fastcall gmenu_left_mouse(int a1);
void __fastcall gmenu_slider_1(TMenuItem *pItem, int min, int max, int gamma);
int __fastcall gmenu_slider_get(TMenuItem *pItem, int min, int max);
void __fastcall gmenu_slider_3(TMenuItem *pItem, int dwTicks);
void __fastcall encrypt_decrypt_block(void *block, int size, int key);
void __fastcall encrypt_encrypt_block(void *block, int size, int key);
int __fastcall encrypt_hash(char *s, int type);
void __cdecl encrypt_init_lookup_table();
int __fastcall encrypt_compress(void *buf, int size);
unsigned int __cdecl encrypt_pkware_read(char *buf, unsigned int *size, TDataInfo *param);
void __cdecl encrypt_pkware_write(char *buf, unsigned int *size, TDataInfo *param);
void __fastcall encrypt_decompress(void *param, int recv_size, int dwMaxBytes);
int __fastcall codec_decode(void *pbSrcDst, int size, char *pszPassword);
void j_SHA1Clear();
void __fastcall codec_init_key(int unused, char *pszPassword);
int __fastcall codec_get_encoded_len(int dwSrcBytes);
void __fastcall codec_encode(void *pbSrcDst, int size, int size_64, char *pszPassword);
void __cdecl InitTownTriggers();
void __cdecl InitL1Triggers();
void __cdecl InitL2Triggers();
void __cdecl InitSKingTriggers();
void __cdecl InitSChambTriggers();
void __cdecl InitPWaterTriggers();
BOOL __cdecl ForceTownTrig();
BOOL __cdecl ForceL1Trig();
BOOL __cdecl ForceL2Trig();
BOOL __cdecl ForceL3Trig();
void __cdecl CheckTrigForce();
void __cdecl CheckTriggers();
BOOL __fastcall DRLG_L2PlaceMiniSet(unsigned __int8 *miniset, int tmin, int tmax, int cx, int cy, bool setview, int ldir);
void __fastcall DRLG_L2PlaceRndSet(unsigned __int8 *miniset, int rndper);
void __cdecl DRLG_L2Subs();
void __cdecl DRLG_L2Shadows();
void __cdecl InitDungeon();
void __cdecl DRLG_LoadL2SP();
void __cdecl DRLG_FreeL2SP();
void __fastcall DRLG_L2SetRoom(int rx1, int ry1);
void __fastcall DefineRoom(int nX1, int nY1, int nX2, int nY2, int ForceHW);
void __fastcall CreateDoorType(int nX, int nY);
void __fastcall PlaceHallExt(int nX, int nY);
void __fastcall AddHall(int nX1, int nY1, int nX2, int nY2, int nHd);
void __fastcall CreateRoom(int nX1, int nY1, int nX2, int nY2, int nRDest, int nHDir, int ForceHW, int nH, int nW);
void __fastcall GetHall(int *nX1, int *nY1, int *nX2, int *nY2, int *nHd);
void __fastcall ConnectHall(int nX1, int nY1, int nX2, int nY2, int nHd);
void __fastcall DoPatternCheck(int i, int j);
void __cdecl L2TileFix();
BOOL __fastcall DL2_Cont(bool x1f, bool y1f, bool x2f, bool y2f);
int __cdecl DL2_NumNoChar();
void __fastcall DL2_DrawRoom(int x1, int y1, int x2, int y2);
void __fastcall DL2_KnockWalls(int x1, int y1, int x2, int y2);
BOOL __cdecl DL2_FillVoids();
BOOL __cdecl CreateDungeon();
void __cdecl DRLG_L2Pass3();
void __fastcall DRLG_L2FTVR(int i, int j, int x, int y, int d);
void __cdecl DRLG_L2FloodTVal();
void __cdecl DRLG_L2TransFix();
void __cdecl L2DirtFix();
BOOL __fastcall DRLG_WillThemeRoomFit(int x, int y, int minSize, int maxSize, int *width, int *height);
void __fastcall DRLG_CreateThemeRoom(int themeIndex, int width, int height);
void __cdecl DRLG_PlaceThemeRooms();
void __fastcall DRLG_L2(int entry);
void __cdecl DRLG_InitL2Vals();
void __fastcall LoadL2Dungeon(char *sFileName, int vx, int vy);
void __fastcall LoadPreL2Dungeon(char *sFileName, int vx, int vy);
void __fastcall unused_sub_482168(int a1, int a2);
void __fastcall CreateL2Dungeon(int rseed, int entry);
void __fastcall play_movie(char *pszMovie, bool user_can_close);
LRESULT __stdcall MovieWndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
void movie_unused_48251A();
void __fastcall movie_unused_482539(char *palette, char *a2); // idb
BOOL movie_unused_482640_paint();
void movie_unused_4826A8();
BOOL __cdecl TFit_Barrel();
BOOL __fastcall TFit_Shrine(int i);
BOOL __fastcall TFit_Obj5(int t);
BOOL __fastcall TFit_SkelRoom(int t);
BOOL __fastcall SpecialThemeFit(int i, int t);
BOOL __fastcall CheckThemeRoom(int tv);
void __cdecl InitThemes();
void __cdecl HoldThemeRooms();
BOOL __fastcall CheckThemeObj3(int xp, int yp, int t, int f);
void __fastcall PlaceThemeMonsts(int t, int f);
void __fastcall Theme_Barrel(int t);
void __fastcall Theme_Shrine(int t);
void __fastcall Theme_MonstPit(int t);
void __fastcall Theme_SkelRoom(int t);
void __fastcall Theme_Treasure(int t);
void __fastcall Theme_Library(int t);
void __fastcall Theme_Torture(int t);
void __fastcall Theme_BloodFountain(int t);
void __fastcall Theme_Decap(int t);
void __fastcall Theme_PurifyingFountain(int t);
void __cdecl CreateThemeRooms();
void __cdecl SHA1Clear();
void __fastcall SHA1Result(int n, char *Message_Digest);
void __fastcall SHA1Calculate(int n, const char *data, char *Message_Digest);
void __fastcall SHA1Input(SHA1Context *context, const char *message_array, int len);
void __fastcall SHA1ProcessMessageBlock(SHA1Context *context);
void __fastcall j_SHA1Reset(int n);
void __fastcall SHA1Reset(SHA1Context *ctx);
int __fastcall sync_all_monsters(TSyncHeader *packet, int size);
void __cdecl sync_one_monster();
int __fastcall sync_monster_active(TSyncMonster *packet);
void __fastcall sync_monster_pos(TSyncMonster *packet, int mon_id);
int __fastcall sync_monster_active2(TSyncMonster *packet);
void __fastcall SyncPlrInv(TSyncHeader *pItem);
int __fastcall SyncData(int pnum, TSyncHeader *packet);
void __fastcall sync_monster_data(int pnum, TSyncMonster *packet);
void __cdecl sync_clear_pkt();
void __cdecl InitCursor();
void __cdecl FreeCursor();
void __fastcall SetICursor(int i);
void __fastcall SetCursor(int i);
void __fastcall j_SetCursor(int hCursor);
void __cdecl InitLevelCursor();
void __cdecl CheckTown();
void __cdecl CheckCursMove();
void __cdecl scrollrt_draw_cursor_back_buffer();
void __cdecl scrollrt_draw_cursor_item();
void __fastcall DrawMissile(int x, int y, int sx, int sy, int a5, int a6, int del_flag);
void __fastcall DrawClippedMissile(int x, int y, int sx, int sy, int a5, int a6, int a7);
void __fastcall DrawView(int StartX, int StartY);
void __fastcall DrawGame(int x, int y);
void __fastcall scrollrt_draw_lower(int x, int y, int sx, int sy, int a5, int some_flag);
void __fastcall scrollrt_draw_clipped_dungeon(BYTE *a1, int sx, int sy, int a4, int a5, int a6);
void __fastcall DrawClippedMonster(int x, int y, int a3, int a4, int mon_id, int a6, int a7);
void __fastcall DrawClippedPlayer(int pnum, int x, int y, int px, int py, int animdata, int animframe, int animwidth, int a9, int a10);
void __fastcall DrawClippedObject(int x, int y, int a3, int a4, int pre_flag, int a6, int dir);
void __fastcall scrollrt_draw_clipped_e_flag(BYTE *buffer, int x, int y, int a4, int a5);
void __fastcall scrollrt_draw_lower_2(int x, int y, int sx, int sy, int a5, int a6, int some_flag);
void __fastcall scrollrt_draw_clipped_dungeon_2(BYTE *buffer, int x, int y, int a4, int a5, int sx, int sy, int me_flag);
void __fastcall scrollrt_draw_clipped_e_flag_2(BYTE *buffer, int x, int y, int a4, signed int a5, int sx, int sy);
void __fastcall scrollrt_draw_upper(int x, int y, int sx, int sy, int a5, int a6, int some_flag);
void __fastcall scrollrt_draw_dungeon(BYTE *buffer, int x, int y, int a4, int a5, int sx, int sy, int me_flag);
void __fastcall DrawMonster(int x, int y, int a3, int a4, int mon_id, int a6, int a7);
void __fastcall DrawPlayer(int pnum, int x, int y, int px, int py, int animdata, int animframe, int animwidth, int a9, int a10);
void __fastcall DrawObject(int x, int y, int a3, int a4, int pre_flag, int a6, int dir);
void __fastcall scrollrt_draw_e_flag(BYTE *buffer, int x, int y, int a4, int a5, int sx, int sy);
void __fastcall DrawZoom(int x, int y);
void __cdecl ClearScreenBuffer();
void __fastcall scrollrt_draw_game_screen(bool draw_cursor);
void __fastcall DrawMain(int dwHgt, int draw_desc, int draw_hp, int draw_mana, int draw_sbar, int draw_btn, int drawbtnflag);
void __cdecl DrawFPS();
void __cdecl DrawAndBlit();
void __cdecl SaveGamma();
void __cdecl palette_init();
void __cdecl LoadGamma();
void __cdecl LoadSysPal();
void __fastcall LoadPalette(char *pszFileName);
void __fastcall LoadRndLvlPal(int l);
void __cdecl palette_update();
void __cdecl IncreaseGamma();
void __fastcall ApplyGamma(PALETTEENTRY *dst, PALETTEENTRY *src, int n);
void __cdecl DecreaseGamma();
int __fastcall UpdateGamma(int gamma);
void __fastcall PaletteFadeIn(int fr);
void __fastcall SetFadeLevel(int brightness);
void __fastcall PaletteFadeOut(int fr);
void __cdecl palette_update_caves();
void __fastcall palette_update_quest_palette(int n);
void __fastcall CelDrawDatOnly(BYTE *pDecodeTo, BYTE *pRLEBytes, int dwRLESize, int dwRLEWdt);
void __fastcall CelDecodeOnly(int screen_x, int screen_y, void *pCelBuff, int frame, int frame_width);
void __fastcall CelDecDatOnly(BYTE *pBuff, BYTE *pCelBuff, int frame, int frame_width);
void __fastcall CelDrawHdrOnly(int screen_x, int screen_y, BYTE *pCelBuff, int frame, int frame_width, int always_0, int direction);
void __fastcall CelDecodeHdrOnly(BYTE *pBuff, BYTE *pCelBuff, int frame, int frame_width, int always_0, int direction);
void __fastcall CelDecDatLightOnly(BYTE *pDecodeTo, BYTE *pRLEBytes, int frame_content_size, int frame_width);
void __fastcall CelDecDatLightEntry(int a1, BYTE *a2);
void __fastcall CelDecDatLightTrans(BYTE *pDecodeTo, BYTE *pRLEBytes, int frame_content_size, int frame_width);
void __fastcall CelDecodeLightOnly(int screen_x, int screen_y, BYTE *pCelBuff, int frame, int frame_width);
void __fastcall CelDecodeHdrLightOnly(int screen_x, int screen_y, char *pCelBuff, int frame, int frame_width, int always_0, int direction);
void __fastcall CelDecodeHdrLightTrans(BYTE *pBuff, BYTE *pCelBuff, int frame, int frame_width, int always_0, int direction);
void __fastcall CelDrawHdrLightRed(int screen_x, int screen_y, char *pCelBuff, int frame, int frame_width, int always_0, int direction, char always_1);
void __fastcall Cel2DecDatOnly(BYTE *pDecodeTo, BYTE *pRLEBytes, int frame_content_size, int frame_width);
void __fastcall Cel2DrawHdrOnly(int screen_x, int screen_y, BYTE *pCelBuff, int frame, int frame_width, int a6, int direction);
void __fastcall Cel2DecodeHdrOnly(BYTE *pBuff, BYTE *pCelBuff, int frame, int frame_width, int a5, int direction);
void __fastcall Cel2DecDatLightOnly(BYTE *pDecodeTo, BYTE *pRLEBytes, int frame_content_size, int frame_width);
void __fastcall Cel2DecDatLightEntry(int a1, BYTE *a2);
void __fastcall Cel2DecDatLightTrans(BYTE *pDecodeTo, BYTE *pRLEBytes, int frame_content_size, int frame_width);
void __fastcall Cel2DecodeHdrLight(int screen_x, int screen_y, BYTE *pCelBuff, int frame, int frame_width, int a6, int direction);
void __fastcall Cel2DecodeLightTrans(BYTE *dst_buf, BYTE *pCelBuff, int frame, int frame_width, int a5, int direction);
void __fastcall Cel2DrawHdrLightRed(int screen_x, int screen_y, BYTE *pCelBuff, int frame, int frame_width, int always_0, int direction, char always_1);
void __fastcall CelDecodeRect(BYTE *pBuff, int always_0, int dst_height, int dst_width, char *pCelBuff, int frame, int frame_width);
void __fastcall CelDecodeClr(char colour, int screen_x, int screen_y, BYTE *pCelBuff, int frame, int frame_width, int a7, int direction);
void __fastcall CelDrawHdrClrHL(char colour, int screen_x, int screen_y, BYTE *pCelBuff, int frame, int frame_width, int a7, int direction);
void __fastcall Cl2ApplyTrans(BYTE *p, char *ttbl, int last_frame);
void __fastcall ENG_set_pixel(int screen_x, int screen_y, char pixel);
void __fastcall engine_draw_pixel(int x, int y);
void __fastcall engine_draw_automap_pixels(int x1, int y1, int x2, int y2, char a5);
int __fastcall GetDirection(int x1, int y1, int x2, int y2);
void __fastcall SetRndSeed(int s);
int __cdecl GetRndSeed();
int __fastcall random(int idx, int v);
void *__fastcall DiabloAllocPtr(int dwBytes, int line, char *file);
void __fastcall mem_free_dbg(void *ptr, int line, char *file);
unsigned __int8 *__fastcall LoadFileInMem(char *pszName, int *pdwFileLen, int line, char *file);
void __fastcall LoadFileWithMem(char *pszName, void *buf);
void __cdecl FreeGameMem();
BOOL __fastcall run_game_loop(int uMsg);
void __fastcall start_game(int uMsg);
void __cdecl free_game();
int __fastcall diablo_init_menu(int a1, int bSinglePlayer);
int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);
void __cdecl diablo_init_screen();
int __stdcall GM_Game(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
bool __fastcall LeftMouseDown(int wParam);
void __fastcall diablo_491753(BOOL shift);
BOOL __cdecl TryIconCurs();
void __cdecl LeftMouseUp();
void __cdecl RightMouseDown();
void __cdecl diablo_49200C();
BOOL __fastcall PressSysKey(int wParam);
void __fastcall diablo_hotkey_msg(int dwMsg);
void __fastcall ReleaseKey(int vkey);
void __fastcall PressKey(int vkey);
void __fastcall PressChar(char vkey);
void __cdecl LoadLvlGFX();
void __cdecl LoadAllGFX();
void __fastcall CreateLevel(int lvldir);
void __fastcall LoadGameLevel(BOOL firstflag, int lvldir);
void __cdecl diablo_493BDD();
void __fastcall game_loop();
void __cdecl game_logic();
void __fastcall timeout_cursor(bool timeout);
void __cdecl diablo_color_cyc_logic();
void __cdecl InitPortals();
void __fastcall SetPortalStats(int i, int o, int x, int y, int lvl, int lvltype);
void __fastcall AddWarpMissile(int i, int x, int y);
void __cdecl SyncPortals();
void __fastcall AddInTownPortal(int i);
void __fastcall ActivatePortal(int i, int x, int y, int lvl, int lvltype, int sp);
void __fastcall DeactivatePortal(int i);
BOOL __fastcall PortalOnLevel(int i);
void __fastcall RemovePortalMissile(int id);
void __fastcall SetCurrentPortal(int p);
void __cdecl GetPortalLevel();
void __cdecl GetPortalLvlPos();
int __cdecl msg_wait_resync();
TMegaPkt *__cdecl msg_get_next_packet();
void __cdecl msg_free_packets();
int __cdecl msg_wait_for_turns();
void __cdecl msg_process_net_packets();
void __cdecl msg_pre_packet();
void __fastcall DeltaExportData(int pnum);
void *__fastcall DeltaExportItem(void *dst, void *src);
void *__fastcall DeltaExportObject(void *dst, void *src);
void *__fastcall DeltaExportMonster(void *dst, void *src);
char *__fastcall DeltaExportJunk(char *a1);
int __fastcall msg_comp_level(char *buffer, int size);
void __cdecl delta_init();
void __fastcall delta_kill_monster(int mi, unsigned __int8 x, unsigned __int8 y, unsigned __int8 bLevel);
void __fastcall delta_monster_hp(int mi, int hp, unsigned __int8 bLevel);
void __fastcall delta_sync_monster(TSyncMonster *p, BYTE level);
void __fastcall delta_leave_sync(unsigned __int8 bLevel);
BOOL __fastcall delta_portal_inited(int portal_num);
void __fastcall DeltaAddItem(int ii);
void __cdecl DeltaSaveLevel();
void __cdecl DeltaLoadLevel();
void __fastcall NetSendCmd(unsigned __int8 bHiPri, unsigned __int8 bCmd);
void __fastcall NetSendCmdLoc(unsigned __int8 bHiPri, unsigned __int8 bCmd, unsigned __int8 x, unsigned __int8 y);
void __fastcall NetSendCmdLocParam1(unsigned __int8 bHiPri, unsigned __int8 bCmd, unsigned __int8 x, unsigned __int8 y, int wParam1);
void __fastcall NetSendCmdLocParam2(unsigned __int8 bHiPri, unsigned __int8 bCmd, unsigned __int8 x, unsigned __int8 y, int wParam1, int wParam2);
void __fastcall NetSendCmdParam1(unsigned __int8 bHiPri, BYTE bCmd, unsigned __int16 wParam1);
void __fastcall NetSendCmdParam2(unsigned __int8 bHiPri, unsigned __int8 bCmd, unsigned __int16 wParam1, unsigned __int16 wParam2);
void __fastcall NetSendCmdGItem(unsigned __int8 bHiPri, unsigned __int8 bCmd, unsigned __int8 mast, unsigned __int8 pnum, BYTE ii);
void __fastcall NetSendCmdGItem2(unsigned __int8 usonly, unsigned __int8 bCmd, unsigned __int8 mast, unsigned __int8 pnum, struct TCmdGItem *p);
void __fastcall NetSendCmdPItem(unsigned __int8 bHiPri, unsigned __int8 bCmd, unsigned __int8 x, unsigned __int8 y);
void __fastcall NetSendCmdChItem(unsigned __int8 bHiPri, unsigned __int8 bLoc);
void __fastcall NetSendCmdDelItem(unsigned __int8 bHiPri, unsigned __int8 bLoc);
void __fastcall NetSendCmdDItem(unsigned __int8 bHiPri, int ii);
void __fastcall NetSendCmdDamage(unsigned __int8 bHiPri, unsigned __int8 bPlr, unsigned int dwDam);
void __fastcall NetSendCmdString(int a1, const char *pszStr);
int __fastcall ParseCmd(int pnum, char *pCmd);
void __fastcall msg_send_packet(int pnum, void *packet, int dwSize);
int __fastcall msg_49A299_on_dlevel(int pnum, char *pCmd);
void __fastcall DeltaImportData(unsigned __int8 cmd, int recv_offset);
void *__fastcall DeltaImportItem(void *src, void *dst);
void *__fastcall DeltaImportObject(void *src, void *dst);
void *__fastcall DeltaImportMonster(void *src, void *dst);
char __fastcall DeltaImportJunk(int src);
void __fastcall delta_sync_object(int a1, char a2, unsigned __int8 level);
BOOL __fastcall delta_get_item(TCmdGItem *pI, unsigned __int8 bLevel);
void __fastcall delta_put_item(struct TCmdPItem *pI, int x, int y, unsigned __int8 bLevel);
BOOL __fastcall msg_49AC05(int level);
int __fastcall On_STRING(int pnum, const char *);
void __fastcall delta_open_portal(int a1, char x, char y, WORD level, WORD ltype);
void __fastcall RemovePlrPortal(int pnum);
void __fastcall check_update_plr(int pnum);
void __cdecl DRLG_Init_Globals();
void __fastcall LoadL1Dungeon(char *sFileName, int vx, int vy);
void __cdecl DRLG_L1Floor();
void __cdecl DRLG_L1Pass3();
void __cdecl DRLG_InitL1Vals();
void __fastcall LoadPreL1Dungeon(char *sFileName, int vx, int vy);
void __fastcall CreateL5Dungeon(int rseed, int entry);
void __cdecl DRLG_LoadL1SP();
void __cdecl DRLG_FreeL1SP();
void __fastcall DRLG_L5(int entry);
void __fastcall DRLG_PlaceDoor(int x, int y);
void __cdecl DRLG_L1Shadows();
int __fastcall DRLG_PlaceMiniSet(unsigned __int8 *miniset, int tmin, int tmax, int cx, int cy, bool setview, int noquad, int ldir);
void __cdecl InitL5Dungeon();
void __cdecl L5ClearFlags();
void __cdecl L5firstRoom();
void __fastcall L5drawRoom(int x, int y, int w, int h);
void __fastcall L5roomGen(int x, int y, int w, int h, bool dir);
BOOL __fastcall L5checkRoom(int x, int y, int width, int height);
int __cdecl L5GetArea();
void __cdecl L5makeDungeon();
void __cdecl L5makeDmt();
void __cdecl L5AddWall();
int __fastcall L5HWallOk(int i, int j);
int __fastcall L5VWallOk(int i, int j);
void __fastcall L5HorizWall(int i, int j, char p, int dx);
void __fastcall L5VertWall(int i, int j, char p, int dy);
void __cdecl L5tileFix();
void __cdecl DRLG_L5Subs();
void __cdecl L5FillChambers();
void __fastcall DRLG_L5GChamber(int sx, int sy, bool topflag, bool bottomflag, bool leftflag, bool rightflag);
void __fastcall DRLG_L5GHall(int x1, int y1, int x2, int y2);
void __fastcall DRLG_L5SetRoom(int rx1, int ry1);
void __cdecl DRLG_L5FloodTVal();
void __fastcall DRLG_L5FTVR(int i, int j, int x, int y, int d);
void __cdecl DRLG_L5TransFix();
void __cdecl DRLG_L5DirtFix();
void __fastcall drawTopArchesUpperScreen(BYTE *pbDst);
void __fastcall drawBottomArchesUpperScreen(BYTE *pbDst, unsigned int *pMask);
void __fastcall drawUpperScreen(BYTE *pbDst);
void __fastcall drawTopArchesLowerScreen(BYTE *pbDst);
void __fastcall drawBottomArchesLowerScreen(BYTE *pbDst, unsigned int *pMask);
void __fastcall drawLowerScreen(BYTE *pbDst);
void __fastcall world_draw_black_tile(BYTE *dst_buf);
// int __cdecl strcmp(const char *, const char *);
// int sprintf(char *, const char *, ...);
// int __cdecl abs(int);
// char *__cdecl strncpy(char *, const char *, size_t);
// void __cdecl __noreturn exit(int);
// void *__cdecl memset(void *, int, size_t);
// char *__cdecl strcpy(char *, const char *);
// char *__cdecl strcat(char *, const char *);
// int sub_4A7050();
// int _cfltcvt_init_7(void); weak
// int __cdecl atoi(const char *);
// size_t __cdecl strlen(const char *);
// char *__cdecl _itoa(int, char *, int);
// void *__cdecl memcpy(void *, const void *, size_t);
// int __cdecl _beginthreadex(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, int, int, DWORD dwCreationFlags, LPDWORD lpThreadId);
// int __cdecl vsprintf(char *, const char *, va_list);
// void *__cdecl memcpy_0(void *, const void *, size_t);
// unsigned int __cdecl _rotr(unsigned int, int);
// time_t __cdecl time(time_t *);
// char *__cdecl strchr(const char *, int);
// int __cdecl _strcmpi(const char *, const char *);
// char *__cdecl strrchr(const char *, int);
// int __cdecl _findfirst(const char *, struct _finddata_t *);
// int __cdecl _findnext(int, struct _finddata_t *);
// int __cdecl isdigit(int);
// int __cdecl tolower(int);
// char *__cdecl _strrev(char *);
// int __cdecl sub_4A7F40(double a1);
// int __cdecl toupper(int);
// void __cdecl srand(unsigned int);
// int __cdecl rand();
// double __cdecl pow(double, double);
// int _setdefaultprecision(void); weak
// int _ms_p5_mp_test_fdiv(void); weak
// void __cdecl free(void *);
// int sub_4AA020();
// int __cdecl _ctrandisp1(double);
// void *__cdecl malloc(size_t);
// _DWORD __cdecl _ld12cvt(_DWORD, _DWORD, _DWORD); weak
// int __cdecl sub_4AC0E0(int a1, int a2);
// int __cdecl sub_4AC100(int a1, int a2);
// int __cdecl sub_4AC120(int a1, int a2);
// int __cdecl sub_4AC160(int a1, int a2);
// int __cdecl __crtGetStringTypeW(DWORD dwInfoType, LPCWSTR lpSrcStr, int cchSrc, LPWORD lpCharType, UINT CodePage, LCID Locale);
// int __cdecl __crtGetStringTypeA(DWORD dwInfoType, LPCSTR lpSrcStr, int cchSrc, LPWORD lpCharType, UINT CodePage, LCID Locale);
// signed int __cdecl sub_4AD230(_DWORD *a1);
// _DWORD __cdecl cvtdate(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// signed int sub_4AE300();
// int sub_4AE5B0();
// void sub_4AE78D();
// double __usercall sub_4AE7BF@<st0>(int a1@<ebp>, double a2@<st1>, double a3@<st0>);
// _DWORD __cdecl __strgtold12(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __cdecl __getlocaleinfo(int, LCID Locale, LCTYPE LCType, int);
// int sub_4B1990();
// BOOL __stdcall VerQueryValueA(LPCVOID pBlock, LPCSTR lpSubBlock, LPVOID *lplpBuffer, PUINT puLen);
// BOOL __stdcall GetFileVersionInfoA(LPCSTR lptstrFilename, DWORD dwHandle, DWORD dwLen, LPVOID lpData);
// DWORD __stdcall GetFileVersionInfoSizeA(LPCSTR lptstrFilename, LPDWORD lpdwHandle);
// HRESULT __stdcall DirectSoundCreate(LPGUID, LPDIRECTSOUND *, LPUNKNOWN);
// int __stdcall UiSelectProvider(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall UiCreatePlayerDescription(_uiheroinfo *a1, int a2);
// int UiDestroy(void); weak
// int __stdcall UiCreditsDialog(_DWORD); weak
// int __stdcall UiMainMenuDialog(int a1, int a2, int a3);
// int __stdcall UiSelHeroMultDialog(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall UiBetaDisclaimer(_DWORD); weak
// int __stdcall UiTitleDialog(_DWORD); weak
// int UiInitialize(void); weak
// int __stdcall UiProgressDialog(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
signed int __cdecl implode(int a1, int a2, _DWORD *a3, int a4, _DWORD *a5, _DWORD *a6);
int __cdecl sub_4B2E90(int a1);
signed int __cdecl sub_4B3210(int a1, unsigned __int8 *a2);
int __cdecl sub_4B3550(int a1, unsigned int a2, unsigned int a3);
unsigned int __cdecl sub_4B35E0(_DWORD *a1, char *a2, unsigned int a3);
__int16 __cdecl sub_4B3620(char *a1, unsigned __int8 a2, unsigned int a3);
int __cdecl sub_4B3690(int a1);
int __cdecl sub_4B3710(int a1, unsigned __int8 *a2, unsigned int a3);
int __cdecl explode(int a1, int a2, int a3, int a4);
int __cdecl sub_4B3950(int a1);
int __cdecl sub_4B3A50(int a1);
int __cdecl sub_4B3C00(_DWORD *a1, int a2);
signed int __cdecl sub_4B3C80(int a1, unsigned int a2);
void __cdecl sub_4B3D10(int a1, int a2, int a3, int a4);
unsigned int __cdecl sub_4B3D50(int a1);
unsigned int __cdecl sub_4B3E50(_DWORD *a1, char *a2, unsigned int a3);
// int __stdcall SDrawMessageBox(_DWORD, _DWORD, _DWORD); weak
// int __stdcall SFileCloseFile(_DWORD); weak
// int __stdcall SFileReadFile(int a1, int a2, int a3, int a4, int a5);
// int __stdcall SFileSetFilePointer(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall SFileOpenFile(_DWORD, _DWORD); weak
// int __stdcall SFileDdaInitialize(_DWORD); weak
// int __stdcall SVidInitialize(_DWORD); weak
// int __stdcall SRegLoadValue(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall SRegSaveValue(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall SFileDdaEnd(_DWORD); weak
// int __stdcall SFileDdaSetVolume(_DWORD, _DWORD, _DWORD); weak
// int __stdcall SFileDdaBegin(_DWORD, _DWORD, _DWORD); weak
// int __stdcall SFileEnableDirectAccess(_DWORD); weak
// int __stdcall SNetSendTurn(_DWORD, _DWORD); weak
// int __stdcall SNetGetTurnsInTransit(_DWORD); weak
// int __stdcall SNetReceiveTurns(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall SNetGetProviderCaps(_DWORD); weak
// int __stdcall SNetSendMessage(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall SNetDropPlayer(_DWORD); weak
// int __cdecl SNetReceiveMessage(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int SNetDestroy(void); weak
// int SNetLeaveGame(void); weak
// int __stdcall SNetGetPlayerName(_DWORD, _DWORD, _DWORD); weak
// int __stdcall SNetGetNumPlayers(_DWORD, _DWORD, _DWORD); weak
// int __stdcall SNetSelectGame(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall SNetCreateGame(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall SNetInitializeProvider(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall SNetSetBasePlayer(_DWORD); weak
// int __stdcall SDrawGetFrameWindow(_DWORD); weak
// int __stdcall SNetPerformUpgrade(_DWORD); weak
// int __cdecl SDrawManualInitialize(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int StormDestroy();
// int SVidDestroy(void); weak
// int __cdecl SFileDdaDestroy();
// int __cdecl SFileCloseArchive(_DWORD); weak
// int __stdcall SFileOpenArchive(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall SRegLoadString(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall SFileGetFileSize(_DWORD, _DWORD); weak
// int __stdcall SFileDdaGetPos(_DWORD, _DWORD, _DWORD); weak
// int __stdcall SVidPlayEnd(_DWORD); weak
// int SVidPlayContinue(void); weak
// int __stdcall SVidPlayBegin(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall SMemAlloc(_DWORD, _DWORD, _DWORD); weak
// int __stdcall SMemFree(_DWORD, _DWORD, _DWORD); weak
// HRESULT __stdcall DirectDrawCreate(GUID *lpGUID, LPDIRECTDRAW *lplpDD, IUnknown *pUnkOuter);
// LONG __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult);
// LONG __stdcall RegCloseKey(HKEY hKey);
// LONG __stdcall RegSetValueExA(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData);
// LONG __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
// DWORD __stdcall GdiSetBatchLimit(DWORD);
// int __stdcall GetDeviceCaps(HDC, int);
// BOOL __stdcall TextOutA(HDC, int, int, LPCSTR, int);
// UINT __stdcall GetSystemPaletteEntries(HDC, UINT, UINT, LPPALETTEENTRY);
// BOOL __stdcall ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
// HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
// void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo);
// BOOL __stdcall FindClose(HANDLE hFindFile);
// BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData);
// HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData);
// HANDLE __stdcall OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId);
// DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize);
// DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer);
// BOOL __stdcall DeleteFileA(LPCSTR lpFileName);
// DWORD __stdcall GetTempPathA(DWORD nBufferLength, LPSTR lpBuffer);
// UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName);
// BOOL __stdcall GetComputerNameA(LPSTR lpBuffer, LPDWORD nSize);
// DWORD __stdcall GetPrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
// DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh);
// BOOL __stdcall SetEndOfFile(HANDLE hFile);
// DWORD __stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds);
// BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
// DWORD __stdcall SetFilePointer(HANDLE hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod);
// BOOL __stdcall GetCPInfo(UINT CodePage, LPCPINFO lpCPInfo);
// BOOL __stdcall CloseHandle(HANDLE hObject);
// void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
// void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
// void __stdcall Sleep(DWORD dwMilliseconds);
// void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
// void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
// DWORD __stdcall GetTickCount();
// DWORD __stdcall GetLastError();
// DWORD __stdcall FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments);
// HINSTANCE __stdcall ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd);
// HRESULT __stdcall SHGetSpecialFolderLocation(HWND hwndOwner, int nFolder, LPITEMIDLIST *ppidl);
// BOOL __stdcall SHGetPathFromIDListA(LPCITEMIDLIST pidl, LPSTR pszPath);
// int __stdcall GetClassNameA(HWND hWnd, LPSTR lpClassName, int nMaxCount);
// HWND __stdcall GetWindow(HWND hWnd, UINT uCmd);
// HWND __stdcall GetForegroundWindow();
// LRESULT __stdcall DefWindowProcA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
// void __stdcall PostQuitMessage(int nExitCode);
// DWORD __stdcall GetWindowThreadProcessId(HWND hWnd, LPDWORD lpdwProcessId);
// BOOL __stdcall MessageBeep(UINT uType);
// int __stdcall ShowCursor(BOOL bShow);
// LONG __stdcall DispatchMessageA(const MSG *lpMsg);
// BOOL __stdcall TranslateMessage(const MSG *lpMsg);
// BOOL __stdcall PeekMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
// BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase);
// BOOL __stdcall EndPaint(HWND hWnd, const PAINTSTRUCT *lpPaint);
// HDC __stdcall BeginPaint(HWND hWnd, LPPAINTSTRUCT lpPaint);
// HICON __stdcall LoadIconA(HINSTANCE hInstance, LPCSTR lpIconName);
// ATOM __stdcall RegisterClassA(const WNDCLASSA *lpWndClass);
// HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
// BOOL __stdcall GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
// BOOL __stdcall DestroyWindow(HWND hWnd);
// SHORT __stdcall GetAsyncKeyState(int vKey);
// BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow);
// BOOL __stdcall UpdateWindow(HWND hWnd);
// void __stdcall keybd_event(BYTE bVk, BYTE bScan, DWORD dwFlags, DWORD dwExtraInfo);
// BOOL __stdcall GetKeyboardState(PBYTE lpKeyState);
// HWND __stdcall GetDesktopWindow();
// HWND __stdcall SetFocus(HWND hWnd);
// BOOL __stdcall SetRect(LPRECT lprc, int xLeft, int yTop, int xRight, int yBottom);
// LONG __stdcall GetWindowLongA(HWND hWnd, int nIndex);
// BOOL __stdcall AdjustWindowRectEx(LPRECT lpRect, DWORD dwStyle, BOOL bMenu, DWORD dwExStyle);
// BOOL __stdcall SetCursorPos(int X, int Y);
// HCURSOR __stdcall LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName);
// int __stdcall ReleaseDC(HWND hWnd, HDC hDC);
// int wsprintfA(LPSTR, LPCSTR, ...);
// HDC __stdcall GetDC(HWND hWnd);
// int __stdcall wvsprintfA(LPSTR, LPCSTR, va_list arglist);
// int __stdcall MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
// int __stdcall LoadStringA(HINSTANCE hInstance, UINT uID, LPSTR lpBuffer, int nBufferMax);
// BOOL __stdcall PostMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
// int __stdcall UiCreatePlayerDescription(_DWORD, _DWORD); weak
// int __stdcall UiMainMenuDialog(_DWORD, _DWORD, _DWORD); weak
// int __stdcall SFileReadFile(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int StormDestroy(void); weak

//-------------------------------------------------------------------------
